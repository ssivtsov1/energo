//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop

#include "fFiderDet.h"
#include "fEqpBase.h"
#include "ftree.h"
#include "Main.h"
#include "equipment.h"
#include "fBal.h"
#include "SysUser.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
//TfFiderDet *fFiderDet;
//AnsiString AddDataName;
AnsiString retvalue;
TWTWinDBGrid *WVoltageGrid;
TWTDBGrid *WPosGrid;
//---------------------------------------------------------------------------
__fastcall TfFiderDet::TfFiderDet(TComponent* Owner)
        : TfEqpDet(Owner)
{
  edit_enable = CheckLevel("Схема 2 - Параметры фидера")!=0 ;
}
//---------------------------------------------------------------------------
void __fastcall TfFiderDet::FormClose(TObject *Sender,
      TCloseAction &Action)
{
Action = caFree;
}
//---------------------------------------------------------------------------
void __fastcall TfFiderDet::FormShow(TObject *Sender)
{
// Настройка формы
// if(fTreeForm->EqpEdit->EqpType!=7)
 if(eqp_type!=15)
   {
     ShowMessage("Данный тип оборудования не поддерживается!");
     Close();
     return;
    };

   // Получить имена таблиц
   GetTableNames(Sender);
   // Выбрать из полученной таблици данные

   if (mode==0) return;
   else
   {
     edClassId->ReadOnly =!edit_enable;
     edLostsCoef->ReadOnly =!edit_enable;
     sbClassSel->Enabled =edit_enable;
   }


   sqlstr=" select dt.id_voltage ,dt.losts_coef, dt.id_position, dt.l04_count, dt.l04_length, dt.l04f1_length,dt.l04f3_length, dt.Fgcp, \
   v.voltage_min, v.voltage_max, cp.represent_name \
   from %name_table AS dt left join  eqk_voltage_tbl AS v on (dt.id_voltage=v.id) \
   left join clm_position_tbl as cp on (cp.id = dt.id_position) \
   where (dt.code_eqp= :code_eqp);";

   ZEqpQuery->Sql->Clear();
   ZEqpQuery->Sql->Add(sqlstr);

   ZEqpQuery->ParamByName("code_eqp")->AsInteger=eqp_id;
   ZEqpQuery->MacroByName("name_table")->AsString=name_table;

   try
   {
    ZEqpQuery->Open();
   }
   catch(...)
   {
    ShowMessage("Ошибка SQL :"+sqlstr);
    ZEqpQuery->Close();
    return;
   }
   if (ZEqpQuery->RecordCount!=0)
   {
     ZEqpQuery->First();
     edClassId->Text=ZEqpQuery->FieldByName("id_voltage")->AsString;
     edLostsCoef->Text=ZEqpQuery->FieldByName("losts_coef")->AsString;
     id_position = ZEqpQuery->FieldByName("id_position")->AsInteger;
     EdPosition->Text=ZEqpQuery->FieldByName("represent_name")->AsString;

     edL04_count->Text=ZEqpQuery->FieldByName("l04_count")->AsString;
     edL04_length->Text=ZEqpQuery->FieldByName("l04_length")->AsString;
     edL04f1_length->Text=ZEqpQuery->FieldByName("l04f1_length")->AsString;
     edL04f3_length->Text=ZEqpQuery->FieldByName("l04f3_length")->AsString;
     edFgcp->Text=ZEqpQuery->FieldByName("Fgcp")->AsString;

     if (ZEqpQuery->FieldByName("voltage_min")->AsInteger==ZEqpQuery->FieldByName("voltage_max")->AsInteger)
     {
      lClassVal->Caption=ZEqpQuery->FieldByName("voltage_min")->AsString+" кВ";
     }
     else
     {
      lClassVal->Caption=ZEqpQuery->FieldByName("voltage_min")->AsString+" - "+
      ZEqpQuery->FieldByName("voltage_max")->AsString +" кВ";
     }

   };
   ZEqpQuery->Close();
   IsModified=false;

   // Если открыли из пофидерного анализа, посчитаем длину фидера
   if (this->Parent->Parent->Parent!=NULL)
   {

     sqlstr="select sum(sn_len) as slen from bal_eqp_tbl as eq \
     join eqm_compens_station_inst_tbl as csi on (eq.code_eqp=csi.code_eqp) \
     where (eq.type_eqp = 6 or eq.type_eqp = 7) and csi.code_eqp_inst = :code_eqp \
     and mmgg =  :mmgg";

     ZEqpQuery->Sql->Clear();
     ZEqpQuery->Sql->Add(sqlstr);

     ZEqpQuery->ParamByName("code_eqp")->AsInteger=eqp_id;
     ZEqpQuery->ParamByName("mmgg")->AsDateTime=((TfBalans* )(this->Parent->Parent->Parent->Parent->Parent))->mmgg;

     try
     {
      ZEqpQuery->Open();
     }
     catch(...)
     {
      ShowMessage("Ошибка SQL :"+sqlstr);
      ZEqpQuery->Close();
      return;
     }
     if (ZEqpQuery->RecordCount!=0)
     {
       ZEqpQuery->First();
       lLength->Caption=ZEqpQuery->FieldByName("slen")->AsString;

       lLengthCaption->Visible = true;
       lLength->Visible = true;
     };
     ZEqpQuery->Close();
   }
}
//---------------------------------------------------------------------------

 bool TfFiderDet::SaveNewData(int id)
 {
   eqp_id=id;

   ZEqpQuery->Sql->Clear();
   ZEqpQuery->Sql->Add("insert into  %name_table (code_eqp,id_voltage,losts_coef,id_position,l04_count,l04_length,l04f1_length,l04f3_length,Fgcp) ");
   ZEqpQuery->Sql->Add("values ( :code_eqp, :id_voltage, :losts_coef, :id_position, :l04_count, :l04_length, :l04f1_length, :l04f3_length, :Fgcp );");

   ZEqpQuery->ParamByName("code_eqp")->AsInteger=eqp_id;
   ZEqpQuery->MacroByName("name_table")->AsString=name_table;

   if (edClassId->Text!="")
    ZEqpQuery->ParamByName("id_voltage")->AsInteger=StrToInt(edClassId->Text);
   if (edLostsCoef->Text!="")
     ZEqpQuery->ParamByName("losts_coef")->AsFloat=StrToFloat(edLostsCoef->Text);

   if (edL04_count->Text!="")
     ZEqpQuery->ParamByName("l04_count")->AsInteger=StrToInt(edL04_count->Text);

   if (edL04_length->Text!="")
     ZEqpQuery->ParamByName("l04_length")->AsInteger=StrToInt(edL04_length->Text);

   if (edL04f1_length->Text!="")
     ZEqpQuery->ParamByName("l04f1_length")->AsInteger=StrToInt(edL04f1_length->Text);

   if (edL04f3_length->Text!="")
     ZEqpQuery->ParamByName("l04f3_length")->AsInteger=StrToInt(edL04f3_length->Text);

   if (edFgcp->Text!="")
     ZEqpQuery->ParamByName("Fgcp")->AsFloat=StrToFloat(edFgcp->Text);

   if (id_position!=0 )
     ZEqpQuery->ParamByName("id_position")->AsInteger=id_position;

   try
   {
    ZEqpQuery->ExecSql();
   }
   catch(...)
   {
    ShowMessage("Ошибка SQL");
    ZEqpQuery->Close();
    return false;
   }
  IsModified=false;
  return true;
 }
//---------------------------------------------------------------------------
 bool TfFiderDet::SaveData(void)
 {

   ZEqpQuery->Sql->Clear();
   ZEqpQuery->Sql->Add("update %name_table set ");
   ZEqpQuery->Sql->Add("id_voltage= :id_voltage, losts_coef= :losts_coef, id_position = :id_position, ");
   ZEqpQuery->Sql->Add("l04_count = :l04_count, l04_length= :l04_length,l04f1_length= :l04f1_length,l04f3_length= :l04f3_length,Fgcp = :Fgcp ");
   ZEqpQuery->Sql->Add("where  code_eqp= :code_eqp");

   ZEqpQuery->ParamByName("code_eqp")->AsInteger=eqp_id;
   ZEqpQuery->MacroByName("name_table")->AsString=name_table;

   if (edClassId->Text!="")
    ZEqpQuery->ParamByName("id_voltage")->AsInteger=StrToInt(edClassId->Text);

   if (edLostsCoef->Text!="")
     ZEqpQuery->ParamByName("losts_coef")->AsFloat=StrToFloat(edLostsCoef->Text);

   if (edL04_count->Text!="")
     ZEqpQuery->ParamByName("l04_count")->AsInteger=StrToInt(edL04_count->Text);

   if (edL04_length->Text!="")
     ZEqpQuery->ParamByName("l04_length")->AsInteger=StrToInt(edL04_length->Text);

   if (edL04f1_length->Text!="")
     ZEqpQuery->ParamByName("l04f1_length")->AsInteger=StrToInt(edL04f1_length->Text);

   if (edL04f3_length->Text!="")
     ZEqpQuery->ParamByName("l04f3_length")->AsInteger=StrToInt(edL04f3_length->Text);

   if (edFgcp->Text!="")
     ZEqpQuery->ParamByName("Fgcp")->AsFloat=StrToFloat(edFgcp->Text);

   if (id_position!=0 )
     ZEqpQuery->ParamByName("id_position")->AsInteger=id_position;

   try
   {
    ZEqpQuery->ExecSql();
   }
   catch(...)
   {
    ShowMessage("Ошибка SQL ");
    ZEqpQuery->Close();
    return false;
   }
  IsModified=false;
  return true;
 }
//---------------------------------------------------------------------------


void __fastcall TfFiderDet::edDataChange(TObject *Sender)
{
  if (((TCustomEdit*)Sender)->Modified) IsModified=true;
}
//---------------------------------------------------------------------------

void __fastcall TfFiderDet::sbClassSelClick(TObject *Sender)
{
 if (fReadOnly) return;
 if (edClassId->Text=="")
  ShowVoltage("0");
 else
  ShowVoltage(edClassId->Text);

}
//---------------------------------------------------------------------------
#define WinName "Классы напряжения"
void _fastcall TfFiderDet::ShowVoltage(AnsiString retvalue) {

  // Определяем владельца
  TWTQuery *QueryAdr;

  TWinControl *Owner = this;
  // Если такое окно есть - активизируем и выходим
  if (MainForm->ShowMDIChild(WinName, Owner)) {
    return;
  }

  QueryAdr = new  TWTQuery(this);
  QueryAdr->Options << doQuickOpen;

  QueryAdr->Sql->Clear();
  QueryAdr->Sql->Add("select id,voltage_min ,voltage_max from eqk_voltage_tbl;" );

  WVoltageGrid = new TWTWinDBGrid(this, QueryAdr,false);
  WVoltageGrid->SetCaption(WinName);

  TWTQuery* Query = WVoltageGrid->DBGrid->Query;

  Query->Open();

  TStringList *WList=new TStringList();
  WList->Add("id");

  TStringList *NList=new TStringList();
//  NList->Add("id");

  Query->SetSQLModify("eqk_voltage_tbl",WList,NList,true,true,true);
  TWTField *Field;

  Field = WVoltageGrid->AddColumn("id", "Класс", "Класс напражения");
  Field = WVoltageGrid->AddColumn("voltage_min", "U min", "Минимальное напряжение");
  Field = WVoltageGrid->AddColumn("voltage_max", "U max", "Максимальное напряжение");

  WVoltageGrid->DBGrid->FieldSource = WVoltageGrid->DBGrid->Query->GetTField("id");

  WVoltageGrid->DBGrid->StringDest = retvalue!="0"?retvalue:AnsiString("-1");
  WVoltageGrid->DBGrid->OnAccept=VoltageAccept;
  WVoltageGrid->DBGrid->Visible = true;
 // WVoltageGrid->DBGrid->ReadOnly=true;
  WVoltageGrid->ShowAs("ВыборКласса");
};
#undef WinName
//---------------------------------------------------------------------------
void __fastcall TfFiderDet::VoltageAccept (TObject* Sender)
{
//   ShowMessage("Выбрано :"+MeterGrid->DBGrid->StringDest);
   edClassId->Text=StrToInt(WVoltageGrid->DBGrid->StringDest);

   if (WVoltageGrid->DBGrid->Query->FieldByName("voltage_min")->AsInteger==WVoltageGrid->DBGrid->Query->FieldByName("voltage_max")->AsInteger)
   {
    lClassVal->Caption=WVoltageGrid->DBGrid->Query->FieldByName("voltage_min")->AsString+" кВ";
   }
   else
   {
    lClassVal->Caption=WVoltageGrid->DBGrid->Query->FieldByName("voltage_min")->AsString+" - "+
    WVoltageGrid->DBGrid->Query->FieldByName("voltage_max")->AsString +" кВ";
   }
   IsModified=true;
}
//----------------------------------------------------------
bool TfFiderDet::CheckData(void)
{
  if (edClassId->Text=="")
   {
     ShowMessage("Не указан уровень напряжения");
     return false;
   }

     return true;
}
//---------------------------------------------------------------------------

void __fastcall TfFiderDet::sbPositionClick(TObject *Sender)
{
  AnsiString EmpS="-1";
  TWTDBGrid* Grid;
  int id_res=0;
  AnsiString filt="";

  TWTQuery *QuerRes=new TWTQuery(this);
  QuerRes->Sql->Add("select syi_resid_fun() as idres");
  QuerRes->Open();

  id_res=QuerRes->FieldByName("idres")->AsInteger;
  filt="id_client="+ToStrSQL(id_res);
  Grid=MainForm->CliPositionSel(NULL,filt);

   if(Grid==NULL) return;
    else WPosGrid=Grid;

   WPosGrid->FieldSource= WPosGrid->Table->GetTField("id");

//   if (!EdPosition->Text.IsEmpty())
//     WPosGrid->StringDest = EdPosition->Text;
//   else
     WPosGrid->StringDest = EmpS;

   WPosGrid->OnAccept=PosAccept;

}
//---------------------------------------------------------------------------
void __fastcall TfFiderDet::PosAccept (TObject* Sender)
{
     id_position=WPosGrid->Table->FieldByName("id")->AsInteger;
     EdPosition->Text=WPosGrid->Table->FieldByName("represent_name")->AsString;    

};
//---------------------------------------------------------------------------

void __fastcall TfFiderDet::spPositionClearClick(TObject *Sender)
{
    id_position=0;
    EdPosition->Text="";
}
//---------------------------------------------------------------------------

